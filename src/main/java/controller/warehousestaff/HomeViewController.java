package controller.warehousestaff;

import dao.InventoryDAO;
import dao.ProductDAO;
import dao.StockEntryDAO;
import javafx.animation.FadeTransition;
import javafx.animation.ScaleTransition;
import javafx.application.Platform;
import javafx.concurrent.Task;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.Node;
import javafx.scene.control.Alert;
import javafx.scene.control.Label;
import javafx.scene.input.MouseEvent;
import javafx.util.Duration;

import java.net.URL;
import java.util.ResourceBundle;

public class HomeViewController implements Initializable {

    private static final int LOW_STOCK_THRESHOLD = 10;

    // FXML Elements
    @FXML private Label totalProductsLabel;
    @FXML private Label lowStockLabel;
    @FXML private Label totalStockEntriesLabel;

    @Override
    public void initialize(URL location, ResourceBundle resources) {
        // Load d·ªØ li·ªáu th·ªëng k√™
        loadHomeDataAsync();

        // Th√™m hi·ªáu ·ª©ng fade in
        addFadeInEffect(totalProductsLabel);
        addFadeInEffect(lowStockLabel);
        addFadeInEffect(totalStockEntriesLabel);
    }

    /**
     * Load d·ªØ li·ªáu trang ch·ªß b·∫•t ƒë·ªìng b·ªô
     */
    private void loadHomeDataAsync() {
        Task<int[]> task = new Task<int[]>() {
            @Override
            protected int[] call() throws Exception {
                try {
                    // L·∫•y t·ªïng s·ªë s·∫£n ph·∫©m
                    int totalProducts = ProductDAO.getTotalProducts();

                    // L·∫•y s·ªë s·∫£n ph·∫©m s·∫Øp h·∫øt h√†ng (‚â§ 10)
                    int lowStock = InventoryDAO.getStockAlerts(LOW_STOCK_THRESHOLD);

                    // L·∫•y t·ªïng s·ªë phi·∫øu nh·∫≠p h√†ng
                    int totalEntries = StockEntryDAO.getAll().size();

                    return new int[]{totalProducts, lowStock, totalEntries};

                } catch (Exception e) {
                    e.printStackTrace();
                    // Tr·∫£ v·ªÅ gi√° tr·ªã m·∫∑c ƒë·ªãnh n·∫øu c√≥ l·ªói
                    return new int[]{0, 0, 0};
                }
            }

            @Override
            protected void succeeded() {
                Platform.runLater(() -> {
                    int[] data = getValue();
                    updateLabels(data[0], data[1], data[2]);
                });
            }

            @Override
            protected void failed() {
                Platform.runLater(() -> {
                    showErrorAlert("Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu trang ch·ªß. Hi·ªÉn th·ªã gi√° tr·ªã m·∫∑c ƒë·ªãnh.");
                    updateLabels(0, 0, 0);
                });
            }
        };

        Thread thread = new Thread(task);
        thread.setDaemon(true);
        thread.start();
    }

    /**
     * C·∫≠p nh·∫≠t c√°c label v·ªõi d·ªØ li·ªáu m·ªõi
     */
    private void updateLabels(int totalProducts, int lowStock, int totalEntries) {
        if (totalProductsLabel != null) {
            totalProductsLabel.setText(String.valueOf(totalProducts));
        }
        if (lowStockLabel != null) {
            lowStockLabel.setText(String.valueOf(lowStock));
        }
        if (totalStockEntriesLabel != null) {
            totalStockEntriesLabel.setText(String.valueOf(totalEntries));
        }
    }

    /**
     * Th√™m hi·ªáu ·ª©ng fade in cho node
     */
    private void addFadeInEffect(Node node) {
        if (node != null) {
            FadeTransition fade = new FadeTransition(Duration.millis(1000), node);
            fade.setFromValue(0.0);
            fade.setToValue(1.0);
            fade.play();
        }
    }

    // ==================== 4 CH·ª®C NƒÇNG CH√çNH ====================

    /**
     * X·ª≠ l√Ω ch·ª©c nƒÉng Qu·∫£n l√Ω t·ªìn kho
     */
    @FXML
    private void handleInventoryManagement(MouseEvent event) {
        addClickEffect((Node) event.getSource());

        showInfoAlert("üì¶ Qu·∫£n l√Ω t·ªìn kho",
                "Ch·ª©c nƒÉng n√†y s·∫Ω cho ph√©p b·∫°n:\n" +
                        "‚Ä¢ Xem danh s√°ch s·∫£n ph·∫©m trong kho\n" +
                        "‚Ä¢ Ki·ªÉm tra s·ªë l∆∞·ª£ng t·ªìn kho\n" +
                        "‚Ä¢ Theo d√µi s·∫£n ph·∫©m s·∫Øp h·∫øt h√†ng\n" +
                        "‚Ä¢ C·∫≠p nh·∫≠t th√¥ng tin t·ªìn kho");
    }

    /**
     * X·ª≠ l√Ω ch·ª©c nƒÉng C·∫≠p nh·∫≠t s·∫£n ph·∫©m
     */
    @FXML
    private void handleProductUpdate(MouseEvent event) {
        addClickEffect((Node) event.getSource());

        showInfoAlert("‚úèÔ∏è C·∫≠p nh·∫≠t s·∫£n ph·∫©m",
                "Ch·ª©c nƒÉng n√†y s·∫Ω cho ph√©p b·∫°n:\n" +
                        "‚Ä¢ Ch·ªânh s·ª≠a th√¥ng tin s·∫£n ph·∫©m\n" +
                        "‚Ä¢ C·∫≠p nh·∫≠t gi√° v√† m√¥ t·∫£\n" +
                        "‚Ä¢ Qu·∫£n l√Ω h√¨nh ·∫£nh s·∫£n ph·∫©m");
    }

    /**
     * X·ª≠ l√Ω ch·ª©c nƒÉng Phi·∫øu nh·∫≠p h√†ng
     */
    @FXML
    private void handleStockEntry(MouseEvent event) {
        addClickEffect((Node) event.getSource());

        showInfoAlert("üìã Phi·∫øu nh·∫≠p h√†ng",
                "Ch·ª©c nƒÉng n√†y s·∫Ω cho ph√©p b·∫°n:\n" +
                        "‚Ä¢ T·∫°o phi·∫øu nh·∫≠p h√†ng m·ªõi\n" +
                        "‚Ä¢ Xem l·ªãch s·ª≠ c√°c phi·∫øu nh·∫≠p\n" +
                        "‚Ä¢ Qu·∫£n l√Ω th√¥ng tin nh√† cung c·∫•p ");
    }

    /**
     * X·ª≠ l√Ω ch·ª©c nƒÉng B√°o c√°o hao h·ª•t
     */
    @FXML
    private void handleLossManagement(MouseEvent event) {
        addClickEffect((Node) event.getSource());

        showInfoAlert("‚ö†Ô∏è B√°o c√°o hao h·ª•t",
                "Ch·ª©c nƒÉng n√†y s·∫Ω cho ph√©p b·∫°n:\n" +
                        "‚Ä¢ Ghi nh·∫≠n h√†ng h√≥a b·ªã hao h·ª•t\n" +
                        "‚Ä¢ Theo d√µi nguy√™n nh√¢n hao h·ª•t\n" +
                        "‚Ä¢ T·∫°o b√°o c√°o th·ªëng k√™\n" +
                        "‚Ä¢ Ph√¢n t√≠ch xu h∆∞·ªõng hao h·ª•t");
    }

    // ==================== UTILITY METHODS ====================

    /**
     * Th√™m hi·ªáu ·ª©ng click cho node
     */
    private void addClickEffect(Node node) {
        if (node != null) {
            // Hi·ªáu ·ª©ng scale khi click
            ScaleTransition scale = new ScaleTransition(Duration.millis(150), node);
            scale.setFromX(1.0);
            scale.setFromY(1.0);
            scale.setToX(0.95);
            scale.setToY(0.95);
            scale.setAutoReverse(true);
            scale.setCycleCount(2);
            scale.play();
        }
    }

    /**
     * Hi·ªÉn th·ªã th√¥ng b√°o l·ªói
     */
    private void showErrorAlert(String message) {
        Alert alert = new Alert(Alert.AlertType.ERROR);
        alert.setTitle("L·ªói");
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.showAndWait();
    }

    /**
     * Hi·ªÉn th·ªã th√¥ng b√°o th√¥ng tin v·ªõi ti√™u ƒë·ªÅ t√πy ch·ªânh
     */
    private void showInfoAlert(String title, String message) {
        Alert alert = new Alert(Alert.AlertType.INFORMATION);
        alert.setTitle("Th√¥ng tin ch·ª©c nƒÉng");
        alert.setHeaderText(title);
        alert.setContentText(message);
        alert.setResizable(true);
        alert.getDialogPane().setPrefWidth(400);
        alert.showAndWait();
    }

    /**
     * Refresh d·ªØ li·ªáu trang ch·ªß
     */
    public void refreshData() {
        loadHomeDataAsync();
    }
}